openapi: 3.0.0
info:
  title: Task Management API
  description: API for managing tasks and user authentication
  version: 1.0.0

servers:
  - url: http://localhost:3000
    description: Local development server

paths:
  /auth/register:
    post:
      summary: Register a new user
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegistration'
      responses:
        '201':
          description: User successfully registered
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '409':
          description: User already exists

  /auth/login:
    post:
      summary: Login a user
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLogin'
      responses:
        '200':
          description: User successfully logged in
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          description: Invalid credentials

  /tasks:
    get:
      summary: Get all tasks for the authenticated user
      tags:
        - Tasks
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of tasks
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Task'
    post:
      summary: Create a new task
      tags:
        - Tasks
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskCreate'
      responses:
        '201':
          description: Task created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'

  /tasks/{id}:
    get:
      summary: Get a specific task
      tags:
        - Tasks
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Task details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '404':
          description: Task not found
    put:
      summary: Update a task
      tags:
        - Tasks
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskUpdate'
      responses:
        '200':
          description: Task updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '404':
          description: Task not found
    delete:
      summary: Delete a task
      tags:
        - Tasks
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Task deleted successfully
        '404':
          description: Task not found

  /health:
    get:
      summary: Health check endpoint
      tags:
        - System
      responses:
        '200':
          description: API is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "OK"
                  message:
                    type: string
                    example: "API is running"

components:
  schemas:
    UserRegistration:
      type: object
      required:
        - name
        - email
        - password
      properties:
        name:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
          format: password

    UserLogin:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password

    UserResponse:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        email:
          type: string

    AuthResponse:
      type: object
      properties:
        access_token:
          type: string

    TaskCreate:
      type: object
      required:
        - title
        - project
      properties:
        title:
          type: string
        project:
          type: string
        description:
          type: string

    TaskUpdate:
      type: object
      properties:
        title:
          type: string
        project:
          type: string
        status:
          type: string
          enum: [TO_DO, DOING, DONE]

    Task:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        project:
          type: string
        status:
          type: string
          enum: [TO_DO, DOING, DONE]
        description:
          type: string
        createdById:
          type: integer
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
